/* The following code was generated by JFlex 1.6.1 */

/*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2016 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2016 Sun Microsystems, Inc.
 */

package org.netbeans.modules.php.blade.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;
import org.netbeans.modules.web.common.api.ByteStack;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING"})

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>/home/ravi/NetBeansProjects/org.netbeans.modules.php.blade/tools/BladeBlockColoringLexer.flex</tt>
 */
public class BladeBlockColoringLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = LexerInput.EOF;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int ST_BLOCK = 2;
  public static final int ST_D_STRING = 4;
  public static final int ST_S_STRING = 6;
  public static final int ST_INTERPOLATION = 8;
  public static final int ST_HIGHLIGHTING_ERROR = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\1\1\54\1\54\1\1\22\0\1\1\1\16\1\33"+
    "\1\53\1\0\1\10\1\0\1\35\1\25\1\25\1\21\1\10\1\25"+
    "\1\11\1\23\1\22\12\27\1\25\1\0\1\17\1\4\1\17\1\25"+
    "\1\52\1\2\1\13\1\40\1\15\1\37\1\46\1\30\1\47\1\32"+
    "\1\30\1\44\1\42\1\45\1\5\1\6\1\41\1\30\1\12\1\31"+
    "\1\7\1\36\1\51\1\50\1\14\2\30\1\25\1\34\1\25\1\0"+
    "\1\30\1\0\1\2\1\13\1\40\1\15\1\37\1\46\1\30\1\47"+
    "\1\32\1\30\1\44\1\42\1\45\1\5\1\6\1\41\1\30\1\12"+
    "\1\31\1\7\1\36\1\51\1\50\1\14\2\30\1\24\1\25\1\26"+
    "\1\10\6\30\1\55\172\30\60\0\2\20\115\0\1\3\u1ea8\0\1\54"+
    "\1\54\u0100\0\1\43\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\1\1\4\3\3\1\4"+
    "\3\3\2\1\2\4\2\5\1\6\2\3\2\1\5\3"+
    "\1\1\5\7\1\1\2\10\1\11\1\7\3\1\1\2"+
    "\1\12\2\1\1\0\1\13\1\1\1\14\1\15\1\3"+
    "\1\4\1\3\3\0\2\3\1\0\1\3\1\16\1\4"+
    "\1\0\1\16\1\0\3\3\1\4\1\3\1\0\1\17"+
    "\3\0\1\20\1\0\10\3\1\0\3\3\2\0\1\7"+
    "\1\4\1\7\2\0\1\21\3\0\1\22\1\12\5\0"+
    "\1\12\1\0\1\23\1\24\1\3\5\0\1\3\2\0"+
    "\1\6\4\3\1\17\1\20\2\3\1\0\4\3\1\0"+
    "\3\3\2\0\1\11\1\21\1\22\1\0\1\23\1\3"+
    "\3\0\1\3\2\0\5\3\1\0\1\3\1\0\4\3"+
    "\2\16\1\3\1\0\1\3\1\0\2\3\2\0\1\23"+
    "\1\3\3\0\4\3\1\0\1\3\1\0\1\3\2\0"+
    "\4\3\1\0\1\3\1\0\1\3\2\0\1\3\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\u0256\0\u0114\0\u0284"+
    "\0\u02b2\0\u02e0\0\u01cc\0\u030e\0\u033c\0\u036a\0\u0398\0\u0114"+
    "\0\u03c6\0\u03f4\0\u0422\0\u0450\0\u047e\0\u04ac\0\u04da\0\u0508"+
    "\0\u0536\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678"+
    "\0\u06a6\0\u0398\0\u0114\0\u06d4\0\u0702\0\u0730\0\u075e\0\u078c"+
    "\0\u07ba\0\u07e8\0\u0816\0\u0844\0\u078c\0\u0114\0\u0872\0\u0114"+
    "\0\u08a0\0\u08ce\0\u0256\0\u08fc\0\u092a\0\u0958\0\u0986\0\u09b4"+
    "\0\u09e2\0\u0a10\0\u0a3e\0\u0256\0\u0a6c\0\u0a9a\0\u0114\0\u0ac8"+
    "\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0450\0\u0114\0\u0bdc"+
    "\0\u047e\0\u0c0a\0\u0114\0\u0c38\0\u0c66\0\u0c94\0\u0cc2\0\u0cf0"+
    "\0\u0d1e\0\u0d4c\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60"+
    "\0\u0e8e\0\u0ebc\0\u0eea\0\u064a\0\u0f18\0\u0f46\0\u0730\0\u0114"+
    "\0\u0f74\0\u075e\0\u0fa2\0\u0114\0\u0114\0\u0816\0\u0844\0\u07e8"+
    "\0\u0fd0\0\u0ffe\0\u078c\0\u102c\0\u0114\0\u0114\0\u105a\0\u1088"+
    "\0\u10b6\0\u10e4\0\u1112\0\u1140\0\u116e\0\u119c\0\u11ca\0\u0ac8"+
    "\0\u11f8\0\u1226\0\u1254\0\u1282\0\u0450\0\u047e\0\u12b0\0\u12de"+
    "\0\u130c\0\u133a\0\u1368\0\u1396\0\u13c4\0\u13f2\0\u1420\0\u144e"+
    "\0\u147c\0\u14aa\0\u14d8\0\u0f46\0\u0730\0\u075e\0\u1506\0\u078c"+
    "\0\u1534\0\u1562\0\u1590\0\u15be\0\u15ec\0\u161a\0\u1648\0\u1676"+
    "\0\u16a4\0\u16d2\0\u1700\0\u172e\0\u019e\0\u175c\0\u178a\0\u17b8"+
    "\0\u17e6\0\u1814\0\u1842\0\u1870\0\u189e\0\u18cc\0\u18fa\0\u1928"+
    "\0\u1956\0\u1984\0\u19b2\0\u19e0\0\u1a0e\0\u07e8\0\u1a3c\0\u1a6a"+
    "\0\u1a98\0\u1ac6\0\u1af4\0\u1b22\0\u1b50\0\u1b7e\0\u1bac\0\u1bda"+
    "\0\u1c08\0\u1c36\0\u1c64\0\u1c92\0\u1cc0\0\u1cee\0\u1d1c\0\u1d4a"+
    "\0\u1d78\0\u1da6\0\u1dd4\0\u1e02\0\u1e30\0\u1e5e\0\u1e8c\0\u1eba";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\2\17\1\20\1\21\1\16\1\22\1\23\1\13\1\24"+
    "\1\25\1\26\1\27\3\30\1\31\1\16\1\32\1\33"+
    "\1\34\1\7\1\35\1\36\1\37\3\16\1\7\1\16"+
    "\1\40\1\41\2\16\1\42\1\43\1\7\1\0\1\16"+
    "\1\7\1\10\1\44\1\7\1\13\1\45\1\46\1\47"+
    "\2\17\1\47\1\50\2\47\1\23\1\13\1\51\1\25"+
    "\1\26\1\52\3\53\1\54\2\47\1\55\1\56\1\7"+
    "\1\57\5\47\1\7\6\47\2\7\1\0\1\47\1\60"+
    "\1\61\31\60\1\62\1\63\16\60\1\64\2\65\1\7"+
    "\1\10\52\7\2\0\1\7\1\10\1\47\2\7\3\47"+
    "\2\7\4\47\5\7\3\53\1\66\1\54\3\47\1\56"+
    "\1\7\1\57\5\47\1\7\6\47\1\7\1\67\1\0"+
    "\1\47\1\70\1\71\52\70\61\0\1\10\56\0\1\16"+
    "\1\17\1\0\1\72\2\16\2\0\4\16\11\0\2\16"+
    "\1\73\1\16\3\0\1\74\4\16\1\0\6\16\3\0"+
    "\1\16\2\0\1\75\34\0\1\76\1\0\1\77\20\0"+
    "\1\17\53\0\1\16\2\0\1\16\1\100\1\16\2\0"+
    "\4\16\11\0\4\16\3\0\5\16\1\0\6\16\3\0"+
    "\1\16\2\0\1\16\2\0\3\16\2\0\1\73\3\16"+
    "\11\0\4\16\3\0\5\16\1\0\6\16\3\0\1\16"+
    "\2\0\1\16\2\0\3\16\2\0\4\16\11\0\4\16"+
    "\3\0\5\16\1\0\6\16\3\0\1\16\2\0\1\101"+
    "\2\0\3\16\2\0\4\16\11\0\4\16\3\0\5\16"+
    "\1\0\6\16\3\0\1\16\2\0\1\16\2\0\3\16"+
    "\1\0\1\102\4\16\11\0\4\16\3\0\4\16\1\103"+
    "\1\0\6\16\3\0\1\16\2\0\1\16\2\0\1\16"+
    "\1\104\1\16\2\0\4\16\11\0\4\16\3\0\5\16"+
    "\1\0\6\16\3\0\1\16\3\0\1\17\1\0\1\105"+
    "\23\0\1\17\13\0\1\106\1\107\30\0\1\17\56\0"+
    "\1\17\56\0\1\17\55\0\1\110\3\0\1\31\30\0"+
    "\1\111\2\0\3\16\2\0\4\16\11\0\4\16\3\0"+
    "\1\16\1\112\1\16\1\113\1\16\1\0\6\16\3\0"+
    "\1\16\2\0\1\16\1\17\1\0\1\114\2\16\2\0"+
    "\4\16\11\0\2\16\1\73\1\16\3\0\5\16\1\0"+
    "\1\16\1\115\1\104\3\16\3\0\1\16\33\116\1\117"+
    "\1\120\21\116\34\121\1\122\1\123\20\121\2\0\1\16"+
    "\1\124\1\0\3\16\2\0\4\16\11\0\2\16\1\125"+
    "\1\16\3\0\5\16\1\0\6\16\3\0\1\16\2\0"+
    "\1\16\2\0\1\126\2\16\2\0\2\16\1\127\1\16"+
    "\11\0\4\16\3\0\4\16\1\130\1\0\1\16\1\131"+
    "\4\16\3\0\1\16\2\0\1\132\2\0\3\16\2\0"+
    "\4\16\11\0\4\16\3\0\5\16\1\0\6\16\3\0"+
    "\1\16\2\0\1\16\2\0\1\16\1\133\1\16\2\0"+
    "\1\134\3\16\2\0\1\135\6\0\3\16\1\136\3\0"+
    "\4\16\1\137\1\0\6\16\3\0\1\16\2\0\1\16"+
    "\2\0\3\16\2\0\4\16\11\0\4\16\3\0\1\16"+
    "\1\140\3\16\1\0\6\16\3\0\1\16\7\0\1\141"+
    "\27\0\1\142\20\0\1\47\1\17\1\0\1\143\2\47"+
    "\2\0\4\47\11\0\2\47\1\144\1\47\3\0\5\47"+
    "\1\0\6\47\3\0\1\47\2\0\1\47\2\0\1\47"+
    "\1\145\1\47\2\0\4\47\11\0\4\47\3\0\5\47"+
    "\1\0\6\47\3\0\1\47\2\0\1\47\2\0\3\47"+
    "\2\0\1\144\3\47\11\0\4\47\3\0\5\47\1\0"+
    "\6\47\3\0\1\47\2\0\1\47\2\0\3\47\2\0"+
    "\4\47\11\0\4\47\3\0\5\47\1\0\6\47\3\0"+
    "\1\47\2\0\1\47\2\0\3\47\1\0\1\102\4\47"+
    "\11\0\4\47\3\0\5\47\1\0\6\47\3\0\1\47"+
    "\3\0\1\17\1\0\1\17\23\0\1\17\47\0\1\146"+
    "\3\0\1\54\30\0\1\47\1\17\1\0\1\144\2\47"+
    "\2\0\4\47\11\0\2\47\1\144\1\47\3\0\5\47"+
    "\1\0\6\47\3\0\1\47\33\147\1\150\1\151\21\147"+
    "\34\152\1\153\1\154\20\152\33\65\1\155\1\156\16\65"+
    "\1\157\3\65\1\61\31\65\1\155\1\156\16\65\1\157"+
    "\2\65\33\160\1\155\1\161\16\160\1\162\2\160\33\65"+
    "\1\163\17\65\1\164\26\65\1\165\6\65\1\0\22\65"+
    "\24\0\1\166\32\0\1\71\56\0\1\16\2\0\3\16"+
    "\2\0\3\16\1\73\11\0\4\16\3\0\5\16\1\0"+
    "\6\16\3\0\1\16\2\0\1\16\2\0\2\16\1\167"+
    "\2\0\4\16\11\0\4\16\3\0\5\16\1\0\6\16"+
    "\3\0\1\16\5\0\1\170\57\0\1\107\50\0\1\171"+
    "\55\0\1\16\2\0\2\16\1\73\2\0\4\16\11\0"+
    "\4\16\3\0\5\16\1\0\6\16\3\0\1\16\2\0"+
    "\1\16\2\0\3\16\2\0\4\16\11\0\4\16\3\0"+
    "\5\16\1\0\4\16\1\104\1\16\3\0\1\16\2\0"+
    "\1\172\3\0\1\173\5\0\1\174\43\0\1\16\2\0"+
    "\1\16\1\175\1\16\2\0\4\16\11\0\4\16\3\0"+
    "\5\16\1\0\6\16\3\0\1\16\40\0\1\176\56\0"+
    "\1\177\43\0\1\200\30\0\1\16\2\0\1\201\2\16"+
    "\2\0\4\16\11\0\4\16\3\0\5\16\1\0\6\16"+
    "\3\0\1\16\2\0\1\16\2\0\2\16\1\104\2\0"+
    "\4\16\11\0\4\16\3\0\5\16\1\0\6\16\3\0"+
    "\1\16\2\0\1\202\2\0\3\16\2\0\4\16\11\0"+
    "\4\16\3\0\5\16\1\0\6\16\3\0\1\16\2\0"+
    "\1\16\2\0\3\16\2\0\4\16\11\0\4\16\3\0"+
    "\2\16\1\203\2\16\1\0\6\16\3\0\1\16\2\0"+
    "\1\16\2\0\3\16\2\0\4\16\11\0\4\16\3\0"+
    "\3\16\1\204\1\16\1\0\6\16\3\0\1\16\33\116"+
    "\1\205\22\116\35\121\1\206\20\121\37\0\1\107\20\0"+
    "\1\16\2\0\3\16\2\0\4\16\11\0\4\16\3\0"+
    "\1\16\1\104\3\16\1\0\6\16\3\0\1\16\2\0"+
    "\1\16\2\0\3\16\2\0\3\16\1\207\11\0\4\16"+
    "\3\0\5\16\1\0\6\16\3\0\1\16\2\0\1\16"+
    "\2\0\2\16\1\210\2\0\4\16\11\0\4\16\3\0"+
    "\5\16\1\0\6\16\3\0\1\16\2\0\1\16\1\211"+
    "\1\0\3\16\2\0\4\16\11\0\2\16\1\212\1\16"+
    "\3\0\5\16\1\0\6\16\3\0\1\16\2\0\1\16"+
    "\2\0\3\16\2\0\1\16\1\213\2\16\11\0\4\16"+
    "\3\0\5\16\1\0\6\16\3\0\1\16\2\0\1\16"+
    "\2\0\3\16\2\0\4\16\11\0\4\16\3\0\2\16"+
    "\1\214\2\16\1\0\6\16\3\0\1\16\2\0\1\16"+
    "\2\0\3\16\2\0\1\104\3\16\11\0\4\16\3\0"+
    "\5\16\1\0\6\16\3\0\1\16\2\0\1\16\2\0"+
    "\1\16\1\215\1\16\2\0\4\16\11\0\4\16\3\0"+
    "\5\16\1\0\6\16\3\0\1\16\42\0\1\216\15\0"+
    "\1\16\2\0\3\16\2\0\4\16\11\0\4\16\3\0"+
    "\4\16\1\217\1\0\6\16\3\0\1\16\2\0\1\16"+
    "\2\0\3\16\2\0\4\16\11\0\4\16\3\0\1\220"+
    "\4\16\1\0\6\16\3\0\1\16\2\0\1\16\2\0"+
    "\3\16\2\0\1\221\3\16\11\0\4\16\3\0\5\16"+
    "\1\0\6\16\3\0\1\16\37\0\1\222\23\0\1\223"+
    "\52\0\1\47\2\0\3\47\2\0\3\47\1\144\11\0"+
    "\4\47\3\0\5\47\1\0\6\47\3\0\1\47\2\0"+
    "\1\47\2\0\2\47\1\144\2\0\4\47\11\0\4\47"+
    "\3\0\5\47\1\0\6\47\3\0\1\47\27\0\1\224"+
    "\26\0\33\147\1\225\22\147\35\152\1\226\20\152\33\160"+
    "\1\62\17\160\1\227\26\160\1\165\6\160\1\155\22\160"+
    "\24\65\1\230\6\65\1\155\1\156\16\65\1\157\2\65"+
    "\2\0\1\16\2\0\1\16\1\231\1\16\2\0\4\16"+
    "\11\0\4\16\3\0\5\16\1\0\6\16\3\0\1\16"+
    "\15\0\1\232\100\0\1\233\22\0\1\234\62\0\1\17"+
    "\51\0\1\173\51\0\1\16\2\0\3\16\2\0\4\16"+
    "\11\0\4\16\3\0\2\16\1\235\2\16\1\0\6\16"+
    "\3\0\1\16\42\0\1\236\21\0\1\237\51\0\1\16"+
    "\2\0\3\16\2\0\3\16\1\240\11\0\4\16\3\0"+
    "\5\16\1\0\6\16\3\0\1\16\2\0\1\16\2\0"+
    "\3\16\2\0\4\16\11\0\4\16\3\0\2\16\1\241"+
    "\2\16\1\0\6\16\3\0\1\16\2\0\1\16\2\0"+
    "\3\16\2\0\4\16\11\0\4\16\3\0\4\16\1\242"+
    "\1\0\6\16\3\0\1\16\2\0\1\16\2\0\1\16"+
    "\1\243\1\16\2\0\4\16\11\0\4\16\3\0\5\16"+
    "\1\0\6\16\3\0\1\16\2\0\1\244\1\245\1\0"+
    "\3\16\2\0\1\20\1\246\2\16\2\0\1\247\6\0"+
    "\2\16\1\32\1\250\3\0\1\16\1\251\3\16\1\0"+
    "\1\16\1\40\1\252\2\16\1\42\3\0\1\16\2\0"+
    "\1\16\2\0\3\16\2\0\4\16\11\0\4\16\3\0"+
    "\1\16\1\253\3\16\1\0\6\16\3\0\1\16\37\0"+
    "\1\254\20\0\1\16\2\0\3\16\2\0\4\16\11\0"+
    "\4\16\3\0\1\16\1\255\3\16\1\0\6\16\3\0"+
    "\1\16\2\0\1\16\2\0\3\16\2\0\4\16\11\0"+
    "\4\16\3\0\1\16\1\256\3\16\1\0\6\16\3\0"+
    "\1\16\2\0\1\16\2\0\3\16\2\0\1\22\3\16"+
    "\11\0\4\16\3\0\5\16\1\0\6\16\3\0\1\16"+
    "\2\0\1\16\2\0\3\16\2\0\4\16\11\0\4\16"+
    "\3\0\5\16\1\0\1\16\1\104\4\16\3\0\1\16"+
    "\7\0\1\257\50\0\1\16\2\0\2\16\1\260\2\0"+
    "\4\16\11\0\4\16\3\0\5\16\1\0\6\16\3\0"+
    "\1\16\2\0\1\16\1\261\1\0\3\16\2\0\4\16"+
    "\11\0\2\16\1\262\1\16\3\0\5\16\1\0\6\16"+
    "\3\0\1\16\2\0\1\16\2\0\3\16\2\0\1\16"+
    "\1\263\2\16\11\0\4\16\3\0\5\16\1\0\6\16"+
    "\3\0\1\16\3\0\1\264\25\0\1\264\41\0\1\265"+
    "\40\0\24\160\1\266\6\160\1\155\1\161\16\160\1\162"+
    "\2\160\2\0\1\16\2\0\3\16\2\0\4\16\11\0"+
    "\4\16\3\0\1\16\1\267\3\16\1\0\6\16\3\0"+
    "\1\16\13\0\1\270\101\0\1\271\33\0\1\17\42\0"+
    "\1\16\2\0\3\16\2\0\4\16\11\0\4\16\3\0"+
    "\5\16\1\107\1\104\5\16\3\0\1\16\36\0\1\272"+
    "\31\0\1\76\45\0\1\16\2\0\3\16\2\0\1\16"+
    "\1\273\2\16\11\0\4\16\3\0\5\16\1\0\6\16"+
    "\3\0\1\16\2\0\1\16\2\0\3\16\2\0\4\16"+
    "\11\0\4\16\3\0\1\16\1\274\3\16\1\0\6\16"+
    "\3\0\1\16\2\0\1\16\2\0\3\16\2\0\4\16"+
    "\11\0\4\16\3\0\1\275\4\16\1\0\6\16\3\0"+
    "\1\16\2\0\1\16\2\0\3\16\2\0\1\112\3\16"+
    "\11\0\4\16\3\0\5\16\1\0\6\16\3\0\1\16"+
    "\2\0\1\16\2\0\3\16\2\0\4\16\11\0\4\16"+
    "\3\0\1\74\4\16\1\0\6\16\3\0\1\16\2\0"+
    "\1\16\2\0\3\16\2\0\4\16\11\0\4\16\3\0"+
    "\4\16\1\103\1\0\6\16\3\0\1\16\46\0\1\107"+
    "\11\0\1\16\2\0\3\16\2\0\4\16\11\0\4\16"+
    "\3\0\5\16\1\0\2\16\1\104\3\16\3\0\1\16"+
    "\2\0\1\16\2\0\3\16\2\0\4\16\11\0\4\16"+
    "\3\0\5\16\1\0\1\16\1\131\4\16\3\0\1\16"+
    "\2\0\1\16\2\0\1\16\1\133\1\16\2\0\4\16"+
    "\2\0\1\135\6\0\3\16\1\136\3\0\5\16\1\0"+
    "\6\16\3\0\1\16\2\0\1\16\2\0\1\276\2\16"+
    "\2\0\4\16\11\0\4\16\3\0\5\16\1\0\6\16"+
    "\3\0\1\16\20\0\1\247\11\0\1\247\25\0\1\16"+
    "\2\0\3\16\2\0\4\16\2\0\1\247\6\0\3\16"+
    "\1\250\3\0\5\16\1\0\6\16\3\0\1\16\2\0"+
    "\1\16\2\0\3\16\2\0\3\16\1\104\11\0\4\16"+
    "\3\0\5\16\1\0\6\16\3\0\1\16\37\0\1\277"+
    "\20\0\1\16\2\0\3\16\2\0\4\16\11\0\4\16"+
    "\3\0\1\16\1\133\3\16\1\0\6\16\3\0\1\16"+
    "\47\0\1\107\10\0\1\16\2\0\3\16\2\0\4\16"+
    "\11\0\4\16\3\0\5\16\1\0\3\16\1\104\2\16"+
    "\3\0\1\16\2\0\1\300\2\0\3\16\2\0\4\16"+
    "\11\0\4\16\3\0\5\16\1\0\6\16\3\0\1\16"+
    "\20\0\1\107\11\0\1\107\32\0\1\141\50\0\1\16"+
    "\1\301\1\0\3\16\2\0\4\16\11\0\2\16\1\302"+
    "\1\16\3\0\5\16\1\0\6\16\3\0\1\16\6\0"+
    "\1\303\111\0\1\304\30\0\1\124\42\0\1\16\2\0"+
    "\1\16\1\305\1\16\2\0\4\16\11\0\4\16\3\0"+
    "\5\16\1\0\6\16\3\0\1\16\2\0\1\16\2\0"+
    "\3\16\2\0\4\16\11\0\4\16\3\0\4\16\1\306"+
    "\1\0\6\16\3\0\1\16\2\0\1\16\2\0\3\16"+
    "\2\0\3\16\1\125\11\0\4\16\3\0\5\16\1\0"+
    "\6\16\3\0\1\16\2\0\1\16\2\0\3\16\2\0"+
    "\3\16\1\307\11\0\4\16\3\0\5\16\1\0\6\16"+
    "\3\0\1\16\12\0\1\107\45\0\1\16\2\0\2\16"+
    "\1\310\2\0\4\16\11\0\4\16\3\0\5\16\1\0"+
    "\6\16\3\0\1\16\40\0\1\311\17\0\1\16\2\0"+
    "\3\16\2\0\4\16\11\0\4\16\3\0\2\16\1\312"+
    "\2\16\1\0\6\16\3\0\1\16\14\0\1\107\100\0"+
    "\1\313\20\0\1\16\2\0\3\16\2\0\2\16\1\104"+
    "\1\16\11\0\4\16\3\0\5\16\1\0\6\16\3\0"+
    "\1\16\2\0\1\16\2\0\3\16\2\0\4\16\11\0"+
    "\4\16\3\0\1\16\1\314\3\16\1\0\6\16\3\0"+
    "\1\16\2\0\1\16\1\107\1\0\3\16\2\0\4\16"+
    "\11\0\2\16\1\104\1\16\3\0\5\16\1\0\6\16"+
    "\3\0\1\16\2\0\1\16\2\0\3\16\2\0\4\16"+
    "\2\0\1\315\6\0\3\16\1\215\3\0\5\16\1\0"+
    "\6\16\3\0\1\16\2\0\1\316\55\0\1\317\2\0"+
    "\3\16\2\0\4\16\11\0\4\16\3\0\5\16\1\0"+
    "\6\16\3\0\1\16\3\0\1\320\25\0\1\320\26\0"+
    "\1\16\1\320\1\0\3\16\2\0\4\16\11\0\2\16"+
    "\1\307\1\16\3\0\5\16\1\0\6\16\3\0\1\16"+
    "\45\0\1\107\51\0\1\124\16\0\1\16\2\0\3\16"+
    "\2\0\4\16\11\0\4\16\3\0\3\16\1\125\1\16"+
    "\1\0\6\16\3\0\1\16\3\0\1\107\25\0\1\107"+
    "\24\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[7912];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\7\1\1\11\10\1\1\11\22\1\1\11"+
    "\11\1\1\0\1\11\1\1\1\11\4\1\3\0\2\1"+
    "\1\0\3\1\1\0\1\11\1\0\5\1\1\0\1\11"+
    "\3\0\1\11\1\0\10\1\1\0\3\1\2\0\3\1"+
    "\2\0\1\11\3\0\2\11\5\0\1\1\1\0\2\11"+
    "\1\1\5\0\1\1\2\0\11\1\1\0\4\1\1\0"+
    "\3\1\2\0\3\1\1\0\2\1\3\0\1\1\2\0"+
    "\5\1\1\0\1\1\1\0\7\1\1\0\1\1\1\0"+
    "\2\1\2\0\2\1\3\0\4\1\1\0\1\1\1\0"+
    "\1\1\2\0\4\1\1\0\1\1\1\0\1\1\2\0"+
    "\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[208];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF = false;

  /* user code: */

    private ByteStack stack = new ByteStack();
    private LexerInput input;

    public BladeBlockColoringLexer(LexerRestartInfo info) {
        this.input = info.input();
        if(info.state() != null) {
            //reset state
            setState((LexerState) info.state());
        } else {
            zzState = zzLexicalState = YYINITIAL;
            stack.clear();
        }

    }

    public static final class LexerState  {
        final ByteStack stack;
        /** the current state of the DFA */
        final int zzState;
        /** the current lexical state */
        final int zzLexicalState;

        LexerState(ByteStack stack, int zzState, int zzLexicalState) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }
            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                && (this.zzState == state.zzState)
                && (this.zzLexicalState == state.zzLexicalState));
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.copyOf(), zzState, zzLexicalState);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected void popState() {
        yybegin(stack.pop());
    }

    protected void pushState(final int state) {
        stack.push(getZZLexicalState());
        yybegin(state);
    }


 // End user code



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public BladeBlockColoringLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 240) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }



  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return input.readText().toString();
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
     return input.readText().charAt(pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return input.readLength();
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    input.backup(number);
    //zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public BladeBlockTokenId findNextToken() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    //int zzCurrentPosL;
    //int zzMarkedPosL;
    //int zzEndReadL = zzEndRead;
    //char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      //zzMarkedPosL = zzMarkedPos;

//      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
      int tokenLength = 0;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
            zzInput = input.read();

            if(zzInput == LexerInput.EOF) {
                //end of input reached
                zzInput = YYEOF;
                break zzForAction;
                //notice: currently LexerInput.EOF == YYEOF
            }

//          if (zzCurrentPosL < zzEndReadL) {
//            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
//            zzCurrentPosL += Character.charCount(zzInput);
//          }
//          else if (zzAtEOF) {
//            zzInput = YYEOF;
//            break zzForAction;
//          }
//          else {
//            // store back cached positions
//            zzCurrentPos  = zzCurrentPosL;
//            zzMarkedPos   = zzMarkedPosL;
//            boolean eof = zzRefill();
//            // get translated positions and possibly new buffer
//            zzCurrentPosL  = zzCurrentPos;
//            zzMarkedPosL   = zzMarkedPos;
//            zzBufferL      = zzBuffer;
//            zzEndReadL     = zzEndRead;
//            if (eof) {
//              zzInput = YYEOF;
//              break zzForAction;
//            }
//            else {
//              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
//              zzCurrentPosL += Character.charCount(zzInput);
//            }
//          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            tokenLength = input.readLength();
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      if(zzInput != YYEOF) {
         input.backup(input.readLength() - tokenLength);
      }

          
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yypushback(yylength());
        pushState(ST_HIGHLIGHTING_ERROR);
            }
          case 21: break;
          case 2: 
            { return BladeBlockTokenId.T_BLADE_WHITESPACE;
            }
          case 22: break;
          case 3: 
            { pushState(ST_BLOCK);
        return BladeBlockTokenId.T_BLADE_NAME;
            }
          case 23: break;
          case 4: 
            { return BladeBlockTokenId.T_BLADE_OPERATOR;
            }
          case 24: break;
          case 5: 
            { pushState(ST_BLOCK);
        return BladeBlockTokenId.T_BLADE_PUNCTUATION;
            }
          case 25: break;
          case 6: 
            { pushState(ST_BLOCK);
        return BladeBlockTokenId.T_BLADE_NUMBER;
            }
          case 26: break;
          case 7: 
            { return BladeBlockTokenId.T_BLADE_NAME;
            }
          case 27: break;
          case 8: 
            { return BladeBlockTokenId.T_BLADE_PUNCTUATION;
            }
          case 28: break;
          case 9: 
            { return BladeBlockTokenId.T_BLADE_NUMBER;
            }
          case 29: break;
          case 10: 
            { popState();
        return BladeBlockTokenId.T_BLADE_STRING;
            }
          case 30: break;
          case 11: 
            { popState();
        return BladeBlockTokenId.T_BLADE_INTERPOLATION_END;
            }
          case 31: break;
          case 12: 
            { return BladeBlockTokenId.T_BLADE_OTHER;
            }
          case 32: break;
          case 13: 
            { popState();
        return BladeBlockTokenId.T_BLADE_WHITESPACE;
            }
          case 33: break;
          case 14: 
            { pushState(ST_BLOCK);
        return BladeBlockTokenId.T_BLADE_TAG;
            }
          case 34: break;
          case 15: 
            { yypushback(yylength());
        pushState(ST_BLOCK);
            }
          case 35: break;
          case 16: 
            { pushState(ST_BLOCK);
        return BladeBlockTokenId.T_BLADE_STRING;
            }
          case 36: break;
          case 17: 
            { yypushback(yylength());
        pushState(ST_D_STRING);
            }
          case 37: break;
          case 18: 
            { return BladeBlockTokenId.T_BLADE_STRING;
            }
          case 38: break;
          case 19: 
            { yypushback(2);
        pushState(ST_INTERPOLATION);
        return BladeBlockTokenId.T_BLADE_STRING;
            }
          case 39: break;
          case 20: 
            { return BladeBlockTokenId.T_BLADE_INTERPOLATION_START;
            }
          case 40: break;
          default:
          if (zzInput == YYEOF)
            //zzAtEOF = true;
{         if(input.readLength() > 0) {
            // backup eof
            input.backup(1);
            //and return the text as error token
            return BladeBlockTokenId.T_BLADE_OTHER;
        } else {
            return null;
        }
 }
        
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
