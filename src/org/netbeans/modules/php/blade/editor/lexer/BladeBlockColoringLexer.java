/* The following code was generated by JFlex 1.6.1 */

 /*
 * DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
 *
 * Copyright 2016 Oracle and/or its affiliates. All rights reserved.
 *
 * Oracle and Java are registered trademarks of Oracle and/or its affiliates.
 * Other names may be trademarks of their respective owners.
 *
 * The contents of this file are subject to the terms of either the GNU
 * General Public License Version 2 only ("GPL") or the Common
 * Development and Distribution License("CDDL") (collectively, the
 * "License"). You may not use this file except in compliance with the
 * License. You can obtain a copy of the License at
 * http://www.netbeans.org/cddl-gplv2.html
 * or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
 * specific language governing permissions and limitations under the
 * License.  When distributing the software, include this License Header
 * Notice in each file and include the License file at
 * nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
 * particular file as subject to the "Classpath" exception as provided
 * by Oracle in the GPL Version 2 section of the License file that
 * accompanied this code. If applicable, add the following below the
 * License Header, with the fields enclosed by brackets [] replaced by
 * your own identifying information:
 * "Portions Copyrighted [year] [name of copyright owner]"
 *
 * If you wish your version of this file to be governed by only the CDDL
 * or only the GPL Version 2, indicate your decision by adding
 * "[Contributor] elects to include this software in this distribution
 * under the [CDDL or GPL Version 2] license." If you do not indicate a
 * single choice of license, a recipient has the option to distribute
 * your version of this file under either the CDDL, the GPL Version 2 or
 * to extend the choice of license to its licensees as provided above.
 * However, if you add GPL Version 2 code and therefore, elected the GPL
 * Version 2 license, then the option applies only if the new code is
 * made subject to such option by the copyright holder.
 *
 * Contributor(s):
 *
 * Portions Copyrighted 2016 Sun Microsystems, Inc.
 */
package org.netbeans.modules.php.blade.editor.lexer;

import org.netbeans.spi.lexer.LexerInput;
import org.netbeans.spi.lexer.LexerRestartInfo;
import org.netbeans.modules.web.common.api.ByteStack;

@org.netbeans.api.annotations.common.SuppressWarnings({"SF_SWITCH_FALLTHROUGH", "URF_UNREAD_FIELD", "DLS_DEAD_LOCAL_STORE", "DM_DEFAULT_ENCODING"})

/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1 from the specification file
 * <tt>/home/ravi/NetBeansProjects/org.netbeans.modules.php.blade/tools/BladeBlockColoringLexer.flex</tt>
 */
public class BladeBlockColoringLexer {

    /**
     * This character denotes the end of file
     */
    public static final int YYEOF = LexerInput.EOF;

    /**
     * initial size of the lookahead buffer
     */
    private static final int ZZ_BUFFERSIZE = 16384;

    /**
     * lexical states
     */
    public static final int YYINITIAL = 0;
    public static final int ST_BLOCK = 2;
    public static final int ST_D_STRING = 4;
    public static final int ST_S_STRING = 6;
    public static final int ST_INTERPOLATION = 8;
    public static final int ST_HIGHLIGHTING_ERROR = 10;

    /**
     * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
     * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l at the
     * beginning of a line l is of the form l = 2*k, k a non negative integer
     */
    private static final int ZZ_LEXSTATE[] = {
        0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5
    };

    /**
     * Translates characters to character classes
     */
    private static final String ZZ_CMAP_PACKED
            = "\11\0\1\1\1\1\1\53\1\53\1\1\22\0\1\1\1\16\1\33"
            + "\1\52\1\0\1\10\1\0\1\35\1\25\1\25\1\21\1\10\1\25"
            + "\1\11\1\23\1\22\12\27\1\25\1\0\1\17\1\4\1\17\1\25"
            + "\1\0\1\2\1\13\1\40\1\15\1\37\1\46\1\30\1\47\1\32"
            + "\1\30\1\44\1\42\1\45\1\5\1\6\1\41\1\30\1\12\1\31"
            + "\1\7\1\36\1\51\1\50\1\14\2\30\1\25\1\34\1\25\1\0"
            + "\1\30\1\0\1\2\1\13\1\40\1\15\1\37\1\46\1\30\1\47"
            + "\1\32\1\30\1\44\1\42\1\45\1\5\1\6\1\41\1\30\1\12"
            + "\1\31\1\7\1\36\1\51\1\50\1\14\2\30\1\24\1\25\1\26"
            + "\1\10\6\30\1\54\172\30\60\0\2\20\115\0\1\3\u1ea8\0\1\53"
            + "\1\53\u0100\0\1\43\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udee5\0";

    /**
     * Translates characters to character classes
     */
    private static final char[] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

    /**
     * Translates DFA states to action switch labels.
     */
    private static final int[] ZZ_ACTION = zzUnpackAction();

    private static final String ZZ_ACTION_PACKED_0
            = "\6\0\1\1\1\2\1\3\1\1\1\4\3\3\1\4"
            + "\4\3\2\1\2\4\2\5\1\6\2\3\2\1\5\3"
            + "\5\7\1\1\2\10\1\11\1\7\3\1\1\2\1\12"
            + "\2\1\1\0\1\13\1\1\1\14\1\15\1\3\1\4"
            + "\1\3\3\0\3\3\1\0\1\3\1\16\1\4\1\0"
            + "\1\16\1\0\3\3\1\4\1\3\1\0\1\17\3\0"
            + "\1\20\1\0\10\3\1\0\3\3\1\7\1\4\1\7"
            + "\2\0\1\21\3\0\1\22\1\12\5\0\1\12\1\0"
            + "\1\23\1\24\1\3\3\0\1\3\3\0\1\3\2\0"
            + "\1\6\4\3\1\17\1\20\2\3\1\0\4\3\1\0"
            + "\3\3\1\11\1\21\1\22\1\0\1\23\1\3\3\0"
            + "\1\3\2\0\5\3\1\0\1\3\1\0\4\3\2\16"
            + "\1\3\1\0\1\3\1\0\2\3\1\23\1\3\3\0"
            + "\4\3\1\0\1\3\1\0\1\3\2\0\4\3\1\0"
            + "\1\3\1\0\1\3\2\0\1\3\1\0";

    private static int[] zzUnpackAction() {
        int[] result = new int[205];
        int offset = 0;
        offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAction(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * Translates a state to a row index in the transition table
     */
    private static final int[] ZZ_ROWMAP = zzUnpackRowMap();

    private static final String ZZ_ROWMAP_PACKED_0
            = "\0\0\0\55\0\132\0\207\0\264\0\341\0\u010e\0\u013b"
            + "\0\u0168\0\u0195\0\u01c2\0\u01ef\0\u021c\0\u0249\0\u010e\0\u0276"
            + "\0\u02a3\0\u02d0\0\u02fd\0\u01c2\0\u032a\0\u0357\0\u0384\0\u03b1"
            + "\0\u010e\0\u03de\0\u040b\0\u0438\0\u0465\0\u0492\0\u04bf\0\u04ec"
            + "\0\u0519\0\u0546\0\u0573\0\u05a0\0\u05cd\0\u05fa\0\u0627\0\u0654"
            + "\0\u0681\0\u03b1\0\u010e\0\u06ae\0\u06db\0\u0708\0\u0735\0\u0762"
            + "\0\u078f\0\u07bc\0\u07e9\0\u0816\0\u0762\0\u010e\0\u0843\0\u010e"
            + "\0\u0870\0\u089d\0\u02d0\0\u08ca\0\u08f7\0\u0924\0\u0951\0\u097e"
            + "\0\u09ab\0\u09d8\0\u0a05\0\u0a32\0\u02d0\0\u0a5f\0\u0a8c\0\u010e"
            + "\0\u0ab9\0\u0ae6\0\u0b13\0\u0b40\0\u0b6d\0\u0b9a\0\u0465\0\u010e"
            + "\0\u0bc7\0\u0492\0\u0bf4\0\u010e\0\u0c21\0\u0c4e\0\u0c7b\0\u0ca8"
            + "\0\u0cd5\0\u0d02\0\u0d2f\0\u0d5c\0\u0d89\0\u0db6\0\u0de3\0\u0e10"
            + "\0\u0e3d\0\u0e6a\0\u0627\0\u0e97\0\u0ec4\0\u0708\0\u010e\0\u0ef1"
            + "\0\u0735\0\u0f1e\0\u010e\0\u010e\0\u07e9\0\u0816\0\u07bc\0\u0f4b"
            + "\0\u0f78\0\u0762\0\u0fa5\0\u010e\0\u010e\0\u0fd2\0\u0fff\0\u102c"
            + "\0\u1059\0\u1086\0\u10b3\0\u10e0\0\u110d\0\u113a\0\u1167\0\u1194"
            + "\0\u0ab9\0\u11c1\0\u11ee\0\u121b\0\u1248\0\u0465\0\u0492\0\u1275"
            + "\0\u12a2\0\u12cf\0\u12fc\0\u1329\0\u1356\0\u1383\0\u13b0\0\u13dd"
            + "\0\u140a\0\u1437\0\u0ec4\0\u0708\0\u0735\0\u1464\0\u0762\0\u1491"
            + "\0\u14be\0\u14eb\0\u1518\0\u1545\0\u1572\0\u159f\0\u15cc\0\u15f9"
            + "\0\u1626\0\u1653\0\u1680\0\u0195\0\u16ad\0\u16da\0\u1707\0\u1734"
            + "\0\u1761\0\u178e\0\u17bb\0\u17e8\0\u1815\0\u1842\0\u186f\0\u189c"
            + "\0\u18c9\0\u18f6\0\u07bc\0\u1923\0\u1950\0\u197d\0\u19aa\0\u19d7"
            + "\0\u1a04\0\u1a31\0\u1a5e\0\u1a8b\0\u1ab8\0\u1ae5\0\u1b12\0\u1b3f"
            + "\0\u1b6c\0\u1b99\0\u1bc6\0\u1bf3\0\u1c20\0\u1c4d\0\u1c7a\0\u1ca7"
            + "\0\u1cd4\0\u1d01\0\u1d2e\0\u1d5b\0\u1d88";

    private static int[] zzUnpackRowMap() {
        int[] result = new int[205];
        int offset = 0;
        offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackRowMap(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int high = packed.charAt(i++) << 16;
            result[j++] = high | packed.charAt(i++);
        }
        return j;
    }

    /**
     * The transition table of the DFA
     */
    private static final int[] ZZ_TRANS = zzUnpackTrans();

    private static final String ZZ_TRANS_PACKED_0
            = "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"
            + "\2\17\1\20\1\21\1\22\1\23\1\24\1\13\1\25"
            + "\1\26\1\27\1\30\3\31\1\32\1\22\1\33\1\34"
            + "\1\35\1\7\1\36\1\37\1\40\3\22\1\7\1\22"
            + "\1\41\1\42\2\22\1\43\1\7\1\0\1\22\1\7"
            + "\1\10\1\44\1\7\1\13\1\45\1\46\1\47\2\17"
            + "\1\47\1\50\2\47\1\24\1\13\1\51\1\26\1\27"
            + "\1\52\3\53\1\54\2\47\1\55\1\56\1\7\1\57"
            + "\5\47\1\7\6\47\1\7\1\0\1\47\1\60\1\61"
            + "\31\60\1\62\1\63\15\60\1\64\2\65\1\7\1\10"
            + "\51\7\2\0\1\7\1\10\1\47\2\7\3\47\2\7"
            + "\4\47\5\7\3\53\1\66\1\54\3\47\1\56\1\7"
            + "\1\57\5\47\1\7\6\47\1\67\1\0\1\47\1\70"
            + "\1\71\51\70\60\0\1\10\55\0\1\22\1\17\1\0"
            + "\1\72\2\22\2\0\4\22\11\0\2\22\1\73\1\22"
            + "\3\0\1\74\4\22\1\0\6\22\2\0\1\22\2\0"
            + "\1\75\34\0\1\76\1\0\1\77\17\0\1\17\52\0"
            + "\1\22\2\0\1\22\1\100\1\22\2\0\4\22\11\0"
            + "\4\22\3\0\5\22\1\0\6\22\2\0\1\22\2\0"
            + "\1\22\2\0\3\22\2\0\1\73\3\22\11\0\4\22"
            + "\3\0\5\22\1\0\6\22\2\0\1\22\2\0\1\22"
            + "\2\0\3\22\2\0\4\22\11\0\4\22\3\0\1\22"
            + "\1\101\3\22\1\0\6\22\2\0\1\22\2\0\1\102"
            + "\2\0\3\22\2\0\4\22\11\0\4\22\3\0\5\22"
            + "\1\0\6\22\2\0\1\22\2\0\1\22\2\0\3\22"
            + "\1\0\1\103\4\22\11\0\4\22\3\0\4\22\1\104"
            + "\1\0\6\22\2\0\1\22\2\0\1\22\2\0\3\22"
            + "\2\0\4\22\11\0\4\22\3\0\5\22\1\0\6\22"
            + "\2\0\1\22\2\0\1\22\2\0\1\22\1\105\1\22"
            + "\2\0\4\22\11\0\4\22\3\0\5\22\1\0\6\22"
            + "\2\0\1\22\3\0\1\17\1\0\1\106\23\0\1\17"
            + "\13\0\1\107\1\110\27\0\1\17\55\0\1\17\55\0"
            + "\1\17\54\0\1\111\3\0\1\32\27\0\1\112\2\0"
            + "\3\22\2\0\4\22\11\0\4\22\3\0\1\22\1\113"
            + "\1\22\1\114\1\22\1\0\6\22\2\0\1\22\2\0"
            + "\1\22\1\17\1\0\1\115\2\22\2\0\4\22\11\0"
            + "\2\22\1\73\1\22\3\0\5\22\1\0\1\22\1\116"
            + "\1\105\3\22\2\0\1\22\33\117\1\120\1\121\20\117"
            + "\34\122\1\123\1\124\17\122\2\0\1\22\1\125\1\0"
            + "\3\22\2\0\4\22\11\0\2\22\1\126\1\22\3\0"
            + "\5\22\1\0\6\22\2\0\1\22\2\0\1\22\2\0"
            + "\1\127\2\22\2\0\2\22\1\130\1\22\11\0\4\22"
            + "\3\0\4\22\1\131\1\0\1\22\1\132\4\22\2\0"
            + "\1\22\2\0\1\133\2\0\3\22\2\0\4\22\11\0"
            + "\4\22\3\0\5\22\1\0\6\22\2\0\1\22\2\0"
            + "\1\22\2\0\1\22\1\134\1\22\2\0\1\135\3\22"
            + "\2\0\1\136\6\0\3\22\1\137\3\0\4\22\1\140"
            + "\1\0\6\22\2\0\1\22\2\0\1\22\2\0\3\22"
            + "\2\0\4\22\11\0\4\22\3\0\1\22\1\141\3\22"
            + "\1\0\6\22\2\0\1\22\2\0\1\47\1\17\1\0"
            + "\1\142\2\47\2\0\4\47\11\0\2\47\1\143\1\47"
            + "\3\0\5\47\1\0\6\47\2\0\1\47\2\0\1\47"
            + "\2\0\1\47\1\144\1\47\2\0\4\47\11\0\4\47"
            + "\3\0\5\47\1\0\6\47\2\0\1\47\2\0\1\47"
            + "\2\0\3\47\2\0\1\143\3\47\11\0\4\47\3\0"
            + "\5\47\1\0\6\47\2\0\1\47\2\0\1\47\2\0"
            + "\3\47\2\0\4\47\11\0\4\47\3\0\5\47\1\0"
            + "\6\47\2\0\1\47\2\0\1\47\2\0\3\47\1\0"
            + "\1\103\4\47\11\0\4\47\3\0\5\47\1\0\6\47"
            + "\2\0\1\47\3\0\1\17\1\0\1\17\23\0\1\17"
            + "\46\0\1\145\3\0\1\54\27\0\1\47\1\17\1\0"
            + "\1\143\2\47\2\0\4\47\11\0\2\47\1\143\1\47"
            + "\3\0\5\47\1\0\6\47\2\0\1\47\33\146\1\147"
            + "\1\150\20\146\34\151\1\152\1\153\17\151\33\65\1\154"
            + "\1\155\15\65\1\156\3\65\1\61\31\65\1\154\1\155"
            + "\15\65\1\156\2\65\33\157\1\154\1\160\15\157\1\161"
            + "\2\157\33\65\1\162\16\65\1\163\26\65\1\164\6\65"
            + "\1\0\21\65\24\0\1\165\31\0\1\71\55\0\1\22"
            + "\2\0\3\22\2\0\3\22\1\73\11\0\4\22\3\0"
            + "\5\22\1\0\6\22\2\0\1\22\2\0\1\22\2\0"
            + "\2\22\1\166\2\0\4\22\11\0\4\22\3\0\5\22"
            + "\1\0\6\22\2\0\1\22\5\0\1\167\56\0\1\110"
            + "\47\0\1\170\54\0\1\22\2\0\2\22\1\73\2\0"
            + "\4\22\11\0\4\22\3\0\5\22\1\0\6\22\2\0"
            + "\1\22\2\0\1\22\1\171\1\0\3\22\2\0\4\22"
            + "\11\0\2\22\1\172\1\22\3\0\5\22\1\0\6\22"
            + "\2\0\1\22\2\0\1\22\2\0\3\22\2\0\4\22"
            + "\11\0\4\22\3\0\5\22\1\0\4\22\1\105\1\22"
            + "\2\0\1\22\2\0\1\173\3\0\1\174\5\0\1\175"
            + "\42\0\1\22\2\0\1\22\1\176\1\22\2\0\4\22"
            + "\11\0\4\22\3\0\5\22\1\0\6\22\2\0\1\22"
            + "\40\0\1\177\55\0\1\200\42\0\1\201\27\0\1\22"
            + "\2\0\1\202\2\22\2\0\4\22\11\0\4\22\3\0"
            + "\5\22\1\0\6\22\2\0\1\22\2\0\1\22\2\0"
            + "\2\22\1\105\2\0\4\22\11\0\4\22\3\0\5\22"
            + "\1\0\6\22\2\0\1\22\2\0\1\203\2\0\3\22"
            + "\2\0\4\22\11\0\4\22\3\0\5\22\1\0\6\22"
            + "\2\0\1\22\2\0\1\22\2\0\3\22\2\0\4\22"
            + "\11\0\4\22\3\0\2\22\1\204\2\22\1\0\6\22"
            + "\2\0\1\22\2\0\1\22\2\0\3\22\2\0\4\22"
            + "\11\0\4\22\3\0\3\22\1\205\1\22\1\0\6\22"
            + "\2\0\1\22\33\117\1\206\21\117\35\122\1\207\17\122"
            + "\37\0\1\110\17\0\1\22\2\0\3\22\2\0\4\22"
            + "\11\0\4\22\3\0\1\22\1\105\3\22\1\0\6\22"
            + "\2\0\1\22\2\0\1\22\2\0\3\22\2\0\3\22"
            + "\1\210\11\0\4\22\3\0\5\22\1\0\6\22\2\0"
            + "\1\22\2\0\1\22\2\0\2\22\1\211\2\0\4\22"
            + "\11\0\4\22\3\0\5\22\1\0\6\22\2\0\1\22"
            + "\2\0\1\22\1\212\1\0\3\22\2\0\4\22\11\0"
            + "\2\22\1\213\1\22\3\0\5\22\1\0\6\22\2\0"
            + "\1\22\2\0\1\22\2\0\3\22\2\0\1\22\1\214"
            + "\2\22\11\0\4\22\3\0\5\22\1\0\6\22\2\0"
            + "\1\22\2\0\1\22\2\0\3\22\2\0\4\22\11\0"
            + "\4\22\3\0\2\22\1\215\2\22\1\0\6\22\2\0"
            + "\1\22\2\0\1\22\2\0\3\22\2\0\1\105\3\22"
            + "\11\0\4\22\3\0\5\22\1\0\6\22\2\0\1\22"
            + "\2\0\1\22\2\0\1\22\1\216\1\22\2\0\4\22"
            + "\11\0\4\22\3\0\5\22\1\0\6\22\2\0\1\22"
            + "\42\0\1\217\14\0\1\22\2\0\3\22\2\0\4\22"
            + "\11\0\4\22\3\0\4\22\1\220\1\0\6\22\2\0"
            + "\1\22\2\0\1\22\2\0\3\22\2\0\4\22\11\0"
            + "\4\22\3\0\1\221\4\22\1\0\6\22\2\0\1\22"
            + "\2\0\1\22\2\0\3\22\2\0\1\222\3\22\11\0"
            + "\4\22\3\0\5\22\1\0\6\22\2\0\1\22\2\0"
            + "\1\47\2\0\3\47\2\0\3\47\1\143\11\0\4\47"
            + "\3\0\5\47\1\0\6\47\2\0\1\47\2\0\1\47"
            + "\2\0\2\47\1\143\2\0\4\47\11\0\4\47\3\0"
            + "\5\47\1\0\6\47\2\0\1\47\27\0\1\223\25\0"
            + "\33\146\1\224\21\146\35\151\1\225\17\151\33\157\1\62"
            + "\16\157\1\226\26\157\1\164\6\157\1\154\21\157\24\65"
            + "\1\227\6\65\1\154\1\155\15\65\1\156\2\65\2\0"
            + "\1\22\2\0\1\22\1\230\1\22\2\0\4\22\11\0"
            + "\4\22\3\0\5\22\1\0\6\22\2\0\1\22\15\0"
            + "\1\231\77\0\1\232\34\0\1\110\11\0\1\110\24\0"
            + "\1\22\2\0\3\22\2\0\4\22\2\0\1\110\6\0"
            + "\3\22\1\105\3\0\5\22\1\0\6\22\2\0\1\22"
            + "\5\0\1\233\61\0\1\17\50\0\1\174\50\0\1\22"
            + "\2\0\3\22\2\0\4\22\11\0\4\22\3\0\2\22"
            + "\1\234\2\22\1\0\6\22\2\0\1\22\42\0\1\235"
            + "\20\0\1\236\50\0\1\22\2\0\3\22\2\0\3\22"
            + "\1\237\11\0\4\22\3\0\5\22\1\0\6\22\2\0"
            + "\1\22\2\0\1\22\2\0\3\22\2\0\4\22\11\0"
            + "\4\22\3\0\2\22\1\240\2\22\1\0\6\22\2\0"
            + "\1\22\2\0\1\22\2\0\3\22\2\0\4\22\11\0"
            + "\4\22\3\0\4\22\1\241\1\0\6\22\2\0\1\22"
            + "\2\0\1\22\2\0\1\22\1\242\1\22\2\0\4\22"
            + "\11\0\4\22\3\0\5\22\1\0\6\22\2\0\1\22"
            + "\2\0\1\243\1\244\1\0\2\22\1\16\2\0\1\20"
            + "\1\245\2\22\2\0\1\246\6\0\2\22\1\33\1\247"
            + "\3\0\1\22\1\250\3\22\1\0\1\22\1\41\1\251"
            + "\2\22\1\43\2\0\1\22\2\0\1\22\2\0\3\22"
            + "\2\0\4\22\11\0\4\22\3\0\1\22\1\252\3\22"
            + "\1\0\6\22\2\0\1\22\37\0\1\253\17\0\1\22"
            + "\2\0\3\22\2\0\4\22\11\0\4\22\3\0\1\22"
            + "\1\254\3\22\1\0\6\22\2\0\1\22\2\0\1\22"
            + "\2\0\3\22\2\0\4\22\11\0\4\22\3\0\1\22"
            + "\1\255\3\22\1\0\6\22\2\0\1\22\2\0\1\22"
            + "\2\0\3\22\2\0\1\23\3\22\11\0\4\22\3\0"
            + "\5\22\1\0\6\22\2\0\1\22\2\0\1\22\2\0"
            + "\3\22\2\0\4\22\11\0\4\22\3\0\5\22\1\0"
            + "\1\22\1\105\4\22\2\0\1\22\7\0\1\256\47\0"
            + "\1\22\2\0\2\22\1\257\2\0\4\22\11\0\4\22"
            + "\3\0\5\22\1\0\6\22\2\0\1\22\2\0\1\22"
            + "\1\260\1\0\3\22\2\0\4\22\11\0\2\22\1\261"
            + "\1\22\3\0\5\22\1\0\6\22\2\0\1\22\2\0"
            + "\1\22\2\0\3\22\2\0\1\22\1\262\2\22\11\0"
            + "\4\22\3\0\5\22\1\0\6\22\2\0\1\22\24\157"
            + "\1\263\6\157\1\154\1\160\15\157\1\161\2\157\2\0"
            + "\1\22\2\0\3\22\2\0\4\22\11\0\4\22\3\0"
            + "\1\22\1\264\3\22\1\0\6\22\2\0\1\22\13\0"
            + "\1\265\100\0\1\266\32\0\1\17\41\0\1\22\2\0"
            + "\3\22\2\0\4\22\11\0\4\22\3\0\5\22\1\110"
            + "\1\105\5\22\2\0\1\22\36\0\1\267\30\0\1\76"
            + "\44\0\1\22\2\0\3\22\2\0\1\22\1\270\2\22"
            + "\11\0\4\22\3\0\5\22\1\0\6\22\2\0\1\22"
            + "\2\0\1\22\2\0\3\22\2\0\4\22\11\0\4\22"
            + "\3\0\1\22\1\271\3\22\1\0\6\22\2\0\1\22"
            + "\2\0\1\22\2\0\3\22\2\0\4\22\11\0\4\22"
            + "\3\0\1\272\4\22\1\0\6\22\2\0\1\22\2\0"
            + "\1\22\2\0\3\22\2\0\1\113\3\22\11\0\4\22"
            + "\3\0\5\22\1\0\6\22\2\0\1\22\2\0\1\22"
            + "\2\0\3\22\2\0\4\22\11\0\4\22\3\0\1\74"
            + "\4\22\1\0\6\22\2\0\1\22\2\0\1\22\2\0"
            + "\3\22\2\0\4\22\11\0\4\22\3\0\4\22\1\104"
            + "\1\0\6\22\2\0\1\22\46\0\1\110\10\0\1\22"
            + "\2\0\3\22\2\0\4\22\11\0\4\22\3\0\5\22"
            + "\1\0\2\22\1\105\3\22\2\0\1\22\2\0\1\22"
            + "\2\0\3\22\2\0\4\22\11\0\4\22\3\0\5\22"
            + "\1\0\1\22\1\132\4\22\2\0\1\22\2\0\1\22"
            + "\2\0\1\22\1\134\1\22\2\0\4\22\2\0\1\136"
            + "\6\0\3\22\1\137\3\0\5\22\1\0\6\22\2\0"
            + "\1\22\2\0\1\22\2\0\1\273\2\22\2\0\4\22"
            + "\11\0\4\22\3\0\5\22\1\0\6\22\2\0\1\22"
            + "\20\0\1\246\11\0\1\246\24\0\1\22\2\0\3\22"
            + "\2\0\4\22\2\0\1\246\6\0\3\22\1\247\3\0"
            + "\5\22\1\0\6\22\2\0\1\22\2\0\1\22\2\0"
            + "\3\22\2\0\3\22\1\105\11\0\4\22\3\0\5\22"
            + "\1\0\6\22\2\0\1\22\37\0\1\274\17\0\1\22"
            + "\2\0\3\22\2\0\4\22\11\0\4\22\3\0\1\22"
            + "\1\134\3\22\1\0\6\22\2\0\1\22\47\0\1\110"
            + "\7\0\1\22\2\0\3\22\2\0\4\22\11\0\4\22"
            + "\3\0\5\22\1\0\3\22\1\105\2\22\2\0\1\22"
            + "\2\0\1\275\2\0\3\22\2\0\4\22\11\0\4\22"
            + "\3\0\5\22\1\0\6\22\2\0\1\22\2\0\1\22"
            + "\1\276\1\0\3\22\2\0\4\22\11\0\2\22\1\277"
            + "\1\22\3\0\5\22\1\0\6\22\2\0\1\22\6\0"
            + "\1\300\110\0\1\301\27\0\1\125\41\0\1\22\2\0"
            + "\1\22\1\302\1\22\2\0\4\22\11\0\4\22\3\0"
            + "\5\22\1\0\6\22\2\0\1\22\2\0\1\22\2\0"
            + "\3\22\2\0\4\22\11\0\4\22\3\0\4\22\1\303"
            + "\1\0\6\22\2\0\1\22\2\0\1\22\2\0\3\22"
            + "\2\0\3\22\1\126\11\0\4\22\3\0\5\22\1\0"
            + "\6\22\2\0\1\22\2\0\1\22\2\0\3\22\2\0"
            + "\3\22\1\304\11\0\4\22\3\0\5\22\1\0\6\22"
            + "\2\0\1\22\12\0\1\110\44\0\1\22\2\0\2\22"
            + "\1\305\2\0\4\22\11\0\4\22\3\0\5\22\1\0"
            + "\6\22\2\0\1\22\40\0\1\306\16\0\1\22\2\0"
            + "\3\22\2\0\4\22\11\0\4\22\3\0\2\22\1\307"
            + "\2\22\1\0\6\22\2\0\1\22\14\0\1\110\77\0"
            + "\1\310\17\0\1\22\2\0\3\22\2\0\2\22\1\105"
            + "\1\22\11\0\4\22\3\0\5\22\1\0\6\22\2\0"
            + "\1\22\2\0\1\22\2\0\3\22\2\0\4\22\11\0"
            + "\4\22\3\0\1\22\1\311\3\22\1\0\6\22\2\0"
            + "\1\22\2\0\1\22\1\110\1\0\3\22\2\0\4\22"
            + "\11\0\2\22\1\105\1\22\3\0\5\22\1\0\6\22"
            + "\2\0\1\22\2\0\1\22\2\0\3\22\2\0\4\22"
            + "\2\0\1\312\6\0\3\22\1\216\3\0\5\22\1\0"
            + "\6\22\2\0\1\22\2\0\1\313\54\0\1\314\2\0"
            + "\3\22\2\0\4\22\11\0\4\22\3\0\5\22\1\0"
            + "\6\22\2\0\1\22\3\0\1\315\25\0\1\315\25\0"
            + "\1\22\1\315\1\0\3\22\2\0\4\22\11\0\2\22"
            + "\1\304\1\22\3\0\5\22\1\0\6\22\2\0\1\22"
            + "\45\0\1\110\50\0\1\125\15\0\1\22\2\0\3\22"
            + "\2\0\4\22\11\0\4\22\3\0\3\22\1\126\1\22"
            + "\1\0\6\22\2\0\1\22\3\0\1\110\25\0\1\110"
            + "\23\0";

    private static int[] zzUnpackTrans() {
        int[] result = new int[7605];
        int offset = 0;
        offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackTrans(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            value--;
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }


    /* error codes */
    private static final int ZZ_UNKNOWN_ERROR = 0;
    private static final int ZZ_NO_MATCH = 1;
    private static final int ZZ_PUSHBACK_2BIG = 2;

    /* error messages for the codes above */
    private static final String ZZ_ERROR_MSG[] = {
        "Unkown internal scanner error",
        "Error: could not match input",
        "Error: pushback value was too large"
    };

    /**
     * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
     */
    private static final int[] ZZ_ATTRIBUTE = zzUnpackAttribute();

    private static final String ZZ_ATTRIBUTE_PACKED_0
            = "\6\0\1\11\7\1\1\11\11\1\1\11\21\1\1\11"
            + "\11\1\1\0\1\11\1\1\1\11\4\1\3\0\3\1"
            + "\1\0\3\1\1\0\1\11\1\0\5\1\1\0\1\11"
            + "\3\0\1\11\1\0\10\1\1\0\6\1\2\0\1\11"
            + "\3\0\2\11\5\0\1\1\1\0\2\11\1\1\3\0"
            + "\1\1\3\0\1\1\2\0\11\1\1\0\4\1\1\0"
            + "\6\1\1\0\2\1\3\0\1\1\2\0\5\1\1\0"
            + "\1\1\1\0\7\1\1\0\1\1\1\0\4\1\3\0"
            + "\4\1\1\0\1\1\1\0\1\1\2\0\4\1\1\0"
            + "\1\1\1\0\1\1\2\0\1\1\1\0";

    private static int[] zzUnpackAttribute() {
        int[] result = new int[205];
        int offset = 0;
        offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
        return result;
    }

    private static int zzUnpackAttribute(String packed, int offset, int[] result) {
        int i = 0;
        /* index in packed string  */
        int j = offset;
        /* index in unpacked array */
        int l = packed.length();
        while (i < l) {
            int count = packed.charAt(i++);
            int value = packed.charAt(i++);
            do {
                result[j++] = value;
            } while (--count > 0);
        }
        return j;
    }

    /**
     * the input device
     */
    private java.io.Reader zzReader;

    /**
     * the current state of the DFA
     */
    private int zzState;

    /**
     * the current lexical state
     */
    private int zzLexicalState = YYINITIAL;

    /**
     * this buffer contains the current text to be matched and is the source of
     * the yytext() string
     */
    private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

    /**
     * the textposition at the last accepting state
     */
    private int zzMarkedPos;

    /**
     * the textposition at the last state to be included in yytext
     */
    private int zzPushbackPos;

    /**
     * the current text position in the buffer
     */
    private int zzCurrentPos;

    /**
     * startRead marks the beginning of the yytext() string in the buffer
     */
    private int zzStartRead;

    /**
     * endRead marks the last character in the buffer, that has been read from
     * input
     */
    private int zzEndRead;

    /**
     * number of newlines encountered up to the start of the matched text
     */
    private int yyline;

    /**
     * the number of characters up to the start of the matched text
     */
    private int yychar;

    /**
     * the number of characters from the last newline up to the start of the
     * matched text
     */
    private int yycolumn;

    /**
     * zzAtBOL == true <=> the scanner is currently at the beginning of a line
     */
    private boolean zzAtBOL = true;

    /**
     * zzAtEOF == true <=> the scanner is at the EOF
     */
    private boolean zzAtEOF = false;

    /* user code: */
    private ByteStack stack = new ByteStack();
    private LexerInput input;

    public BladeBlockColoringLexer(LexerRestartInfo info) {
        this.input = info.input();
        if (info.state() != null) {
            //reset state
            setState((LexerState) info.state());
        } else {
            zzState = zzLexicalState = YYINITIAL;
            stack.clear();
        }

    }

    public static final class LexerState {

        final ByteStack stack;
        /**
         * the current state of the DFA
         */
        final int zzState;
        /**
         * the current lexical state
         */
        final int zzLexicalState;

        LexerState(ByteStack stack, int zzState, int zzLexicalState) {
            this.stack = stack;
            this.zzState = zzState;
            this.zzLexicalState = zzLexicalState;
        }

        @Override
        public boolean equals(Object obj) {
            if (this == obj) {
                return true;
            }
            if (obj == null || obj.getClass() != this.getClass()) {
                return false;
            }
            LexerState state = (LexerState) obj;
            return (this.stack.equals(state.stack)
                    && (this.zzState == state.zzState)
                    && (this.zzLexicalState == state.zzLexicalState));
        }

        @Override
        public int hashCode() {
            int hash = 11;
            hash = 31 * hash + this.zzState;
            hash = 31 * hash + this.zzLexicalState;
            if (stack != null) {
                hash = 31 * hash + this.stack.hashCode();
            }
            return hash;
        }
    }

    public LexerState getState() {
        return new LexerState(stack.copyOf(), zzState, zzLexicalState);
    }

    public void setState(LexerState state) {
        this.stack.copyFrom(state.stack);
        this.zzState = state.zzState;
        this.zzLexicalState = state.zzLexicalState;
    }

    protected int getZZLexicalState() {
        return zzLexicalState;
    }

    protected void popState() {
        yybegin(stack.pop());
    }

    protected void pushState(final int state) {
        stack.push(getZZLexicalState());
        yybegin(state);
    }

    // End user code
    /**
     * Creates a new scanner There is also a java.io.InputStream version of this
     * constructor.
     *
     * @param in the java.io.Reader to read input from.
     */
    /**
     * Creates a new scanner
     *
     * @param in the java.io.Reader to read input from.
     */
    public BladeBlockColoringLexer(java.io.Reader in) {
        this.zzReader = in;
    }

    /**
     * Unpacks the compressed character translation table.
     *
     * @param packed the packed character translation table
     * @return the unpacked character translation table
     */
    private static char[] zzUnpackCMap(String packed) {
        char[] map = new char[0x110000];
        int i = 0;
        /* index in packed string  */
        int j = 0;
        /* index in unpacked array */
        while (i < 240) {
            int count = packed.charAt(i++);
            char value = packed.charAt(i++);
            do {
                map[j++] = value;
            } while (--count > 0);
        }
        return map;
    }

    /**
     * Closes the input stream.
     */
    public final void yyclose() throws java.io.IOException {
        zzAtEOF = true;
        /* indicate end of file */
        zzEndRead = zzStartRead;
        /* invalidate buffer    */

        if (zzReader != null) {
            zzReader.close();
        }
    }

    /**
     * Resets the scanner to read from a new input stream. Does not close the
     * old reader.
     *
     * All internal variables are reset, the old input stream
     * <b>cannot</b> be reused (internal buffer is discarded and lost). Lexical
     * state is set to <tt>ZZ_INITIAL</tt>.
     *
     * @param reader the new input stream
     */
    public final void yyreset(java.io.Reader reader) {
        zzReader = reader;
        zzAtBOL = true;
        zzAtEOF = false;
        zzEndRead = zzStartRead = 0;
        zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
        yyline = yychar = yycolumn = 0;
        zzLexicalState = YYINITIAL;
    }

    /**
     * Returns the current lexical state.
     */
    public final int yystate() {
        return zzLexicalState;
    }

    /**
     * Enters a new lexical state
     *
     * @param newState the new lexical state
     */
    public final void yybegin(int newState) {
        zzLexicalState = newState;
    }

    /**
     * Returns the text matched by the current regular expression.
     */
    public final String yytext() {
        return input.readText().toString();
    }

    /**
     * Returns the character at position <tt>pos</tt> from the matched text.
     *
     * It is equivalent to yytext().charAt(pos), but faster
     *
     * @param pos the position of the character to fetch. A value from 0 to
     * yylength()-1.
     *
     * @return the character at position pos
     */
    public final char yycharat(int pos) {
        return input.readText().charAt(pos);
    }

    /**
     * Returns the length of the matched text region.
     */
    public final int yylength() {
        return input.readLength();
    }

    /**
     * Reports an error that occured while scanning.
     *
     * In a wellformed scanner (no or only correct usage of yypushback(int) and
     * a match-all fallback rule) this method will only be called with things
     * that "Can't Possibly Happen". If this method is called, something is
     * seriously wrong (e.g. a JFlex bug producing a faulty scanner etc.).
     *
     * Usual syntax/scanner level error handling should be done in error
     * fallback rules.
     *
     * @param errorCode the code of the errormessage to display
     */
    private void zzScanError(int errorCode) {
        String message;
        try {
            message = ZZ_ERROR_MSG[errorCode];
        } catch (ArrayIndexOutOfBoundsException e) {
            message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
        }

        throw new Error(message);
    }

    /**
     * Pushes the specified amount of characters back into the input stream.
     *
     * They will be read again by then next call of the scanning method
     *
     * @param number the number of characters to be read again. This number must
     * not be greater than yylength()!
     */
    public void yypushback(int number) {
        if (number > yylength()) {
            zzScanError(ZZ_PUSHBACK_2BIG);
        }

        input.backup(number);
        //zzMarkedPos -= number;
    }

    /**
     * Resumes scanning until the next regular expression is matched, the end of
     * input is encountered or an I/O-Error occurs.
     *
     * @return the next token
     * @exception java.io.IOException if any I/O-Error occurs
     */
    public BladeBlockTokenId findNextToken() throws java.io.IOException {
        int zzInput;
        int zzAction;

        // cached fields:
        //int zzCurrentPosL;
        //int zzMarkedPosL;
        //int zzEndReadL = zzEndRead;
        //char [] zzBufferL = zzBuffer;
        char[] zzCMapL = ZZ_CMAP;

        int[] zzTransL = ZZ_TRANS;
        int[] zzRowMapL = ZZ_ROWMAP;
        int[] zzAttrL = ZZ_ATTRIBUTE;

        while (true) {
            //zzMarkedPosL = zzMarkedPos;

//      yychar+= zzMarkedPosL-zzStartRead;
            zzAction = -1;

            //zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
            int tokenLength = 0;

            zzState = ZZ_LEXSTATE[zzLexicalState];

            // set up zzAction for empty match case:
            int zzAttributes = zzAttrL[zzState];
            if ((zzAttributes & 1) == 1) {
                zzAction = zzState;
            }

            zzForAction:
            {
                while (true) {
                    zzInput = input.read();

                    if (zzInput == LexerInput.EOF) {
                        //end of input reached
                        zzInput = YYEOF;
                        break zzForAction;
                        //notice: currently LexerInput.EOF == YYEOF
                    }

//          if (zzCurrentPosL < zzEndReadL) {
//            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
//            zzCurrentPosL += Character.charCount(zzInput);
//          }
//          else if (zzAtEOF) {
//            zzInput = YYEOF;
//            break zzForAction;
//          }
//          else {
//            // store back cached positions
//            zzCurrentPos  = zzCurrentPosL;
//            zzMarkedPos   = zzMarkedPosL;
//            boolean eof = zzRefill();
//            // get translated positions and possibly new buffer
//            zzCurrentPosL  = zzCurrentPos;
//            zzMarkedPosL   = zzMarkedPos;
//            zzBufferL      = zzBuffer;
//            zzEndReadL     = zzEndRead;
//            if (eof) {
//              zzInput = YYEOF;
//              break zzForAction;
//            }
//            else {
//              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
//              zzCurrentPosL += Character.charCount(zzInput);
//            }
//          }
                    int zzNext = zzTransL[zzRowMapL[zzState] + zzCMapL[zzInput]];
                    if (zzNext == -1) {
                        break zzForAction;
                    }
                    zzState = zzNext;

                    zzAttributes = zzAttrL[zzState];
                    if ((zzAttributes & 1) == 1) {
                        zzAction = zzState;
                        tokenLength = input.readLength();
                        if ((zzAttributes & 8) == 8) {
                            break zzForAction;
                        }
                    }

                }
            }

            // store back cached position
            if (zzInput != YYEOF) {
                input.backup(input.readLength() - tokenLength);
            }

            switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
                case 1: {
                    yypushback(yylength());
                    pushState(ST_HIGHLIGHTING_ERROR);
                }
                case 21:
                    break;
                case 2: {
                    return BladeBlockTokenId.T_BLADE_WHITESPACE;
                }
                case 22:
                    break;
                case 3: {
                    pushState(ST_BLOCK);
                    return BladeBlockTokenId.T_BLADE_NAME;
                }
                case 23:
                    break;
                case 4: {
                    return BladeBlockTokenId.T_BLADE_OPERATOR;
                }
                case 24:
                    break;
                case 5: {
                    pushState(ST_BLOCK);
                    return BladeBlockTokenId.T_BLADE_PUNCTUATION;
                }
                case 25:
                    break;
                case 6: {
                    pushState(ST_BLOCK);
                    return BladeBlockTokenId.T_BLADE_NUMBER;
                }
                case 26:
                    break;
                case 7: {
                    return BladeBlockTokenId.T_BLADE_NAME;
                }
                case 27:
                    break;
                case 8: {
                    return BladeBlockTokenId.T_BLADE_PUNCTUATION;
                }
                case 28:
                    break;
                case 9: {
                    return BladeBlockTokenId.T_BLADE_NUMBER;
                }
                case 29:
                    break;
                case 10: {
                    popState();
                    return BladeBlockTokenId.T_BLADE_STRING;
                }
                case 30:
                    break;
                case 11: {
                    popState();
                    return BladeBlockTokenId.T_BLADE_INTERPOLATION_END;
                }
                case 31:
                    break;
                case 12: {
                    return BladeBlockTokenId.T_BLADE_OTHER;
                }
                case 32:
                    break;
                case 13: {
                    popState();
                    return BladeBlockTokenId.T_BLADE_WHITESPACE;
                }
                case 33:
                    break;
                case 14: {
                    pushState(ST_BLOCK);
                    return BladeBlockTokenId.T_BLADE_TAG;
                }
                case 34:
                    break;
                case 15: {
                    yypushback(yylength());
                    pushState(ST_BLOCK);
                }
                case 35:
                    break;
                case 16: {
                    pushState(ST_BLOCK);
                    return BladeBlockTokenId.T_BLADE_STRING;
                }
                case 36:
                    break;
                case 17: {
                    yypushback(yylength());
                    pushState(ST_D_STRING);
                }
                case 37:
                    break;
                case 18: {
                    return BladeBlockTokenId.T_BLADE_STRING;
                }
                case 38:
                    break;
                case 19: {
                    yypushback(2);
                    pushState(ST_INTERPOLATION);
                    return BladeBlockTokenId.T_BLADE_STRING;
                }
                case 39:
                    break;
                case 20: {
                    return BladeBlockTokenId.T_BLADE_INTERPOLATION_START;
                }
                case 40:
                    break;
                default:
                    if (zzInput == YYEOF) //zzAtEOF = true;
                    {
                        if (input.readLength() > 0) {
                            // backup eof
                            input.backup(1);
                            //and return the text as error token
                            return BladeBlockTokenId.T_BLADE_OTHER;
                        } else {
                            return null;
                        }
                    } else {
                        zzScanError(ZZ_NO_MATCH);
                    }
            }
        }
    }

}
